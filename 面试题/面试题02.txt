1. 问答题
	shrot s1 = 1;
	short s2 = 2;
	short s3 = 0;
	问s3 =s1+s2;能不能通过编译，能通过结果是什么？以及为什么？
	问s3+=s1 ;能不能通过编译，能通过结果是什么？以及为什么？
	答:s3=s1+s2不能通过编译,因为系统做加法运算时会将小的整型转换为int或long型进行计算,计算后的结果为int或者long型,将int赋值给short型会报编译器错误
	s3+=s1,能通过编译,结果是1,+=操作会将计算结果强制转型后再赋值给s3

2. spring事务管理器是啥？怎么表现的？
	答:Spring事务管理器的接口org.springframework.transaction.PlatformTransactionManager.
	Spring并不直接管理事务，通过这个接口，Spring为各个平台如JDBC、Hibernate等都提供了对应的事务管理器，也就是将事务管理的职责委托给Hibernate或者JTA等持久化机制所提供的相关平台框架的事务来实现

3. Hibernate源码中几个包的作用简要介绍
	net.sf.hibernate.* 该包的类基本上都是接口类和异常类 
	net.sf.hibernate.cache.* JCS的实现类 
	net.sf.hibernate.cfg.* 配置文件读取类 
	net.sf.hibernate.collection.* Hibernate集合接口实现类,例如List,Set,Bag等等,Hibernate之所以要自行编写集合接口实现类是为了支持lazy loading 
	net.sf.hibernate.connection.* 几个数据库连接池的PRovider 
	net.sf.hibernate.dialect.* 支持多种数据库特性,每个Dialect实现类代表一种数据库,描述了该数据库支持的数据类型和其它特点,例如是否有AutoIncrement,是否有Sequence,是否有分页sql等等 
	net.sf.hibernate.eg.* Hibernate文档中用到的例子 
	net.sf.hibernate.engine.* 这个包的类作用比较散 
	net.sf.hibernate.eXPression.* HQL支持的表达式 
	net.sf.hibernate.hq.* HQL实现 
	net.sf.hibernate.id.* ID生成器 
	net.sf.hibernate.impl.* 最核心的包,一些重要接口的实现类,假如session,SessionFactory,Query等 
	net.sf.hibernate.jca.* JCA支持,把Session包装为支持JCA的接口实现类 
	net.sf.hibernate.jmx.* 我不懂JMX,只知道JMX是用来编写App Server的治理程序的,大概是JMX部分接口的实现,使得App Server可以通过JMX接口治理Hibernate 
	net.sf.hibernate.loader.* 也是很核心的包,主要是生成sql语句的 
	net.sf.hibernate.lob.* Blob和Clob支持 
	net.sf.hibernate.mapping.* hbm文件的属性实现 
	net.sf.hibernate.metadata.* PO的Meta实现 
	net.sf.hibernate.odmg.* ODMG是一个ORM标准,这个包是ODMG标准的实现类 
	net.sf.hibernate.persister.* 核心包,实现持久对象和表之间的映射 
	net.sf.hibernate.proxy.* Proxy和Lazy Loading支持 
	net.sf.hibernate.ps.* 该包是PreparedStatment Cache 
	net.sf.hibernate.sql.* 生成JDBC sql语句的包 
	net.sf.hibernate.test.* 测试类,你可以用junit来测试Hibernate 
	net.sf.hibernate.tool.hbm2ddl.* 用hbm配置文件生成DDL 
	net.sf.hibernate.transaction.* Hibernate Transaction实现类 
	net.sf.hibernate.type.* Hibernate中定义的持久对象的属性的数据类型 
	net.sf.hibernate.util.* 一些工具类,作用比较散 
	net.sf.hibernate.xml.* XML数据绑定

4. hibernate中get和load的区别
	答:当使用load方法来得到一个对象时，此时hibernate会使用延迟加载的机制来加载这个对象，即：当我们使用session.load()方法来加载一个对象时，此时并不会发出sql语句，当前得到的这个对象其实是一个代理对象，这个代理对象只保存了实体对象的id值，只有当我们要使用这个对象，得到其它属性时，这个时候才会发出sql语句，从数据库中去查询我们的对象.
	相对于load的延迟加载方式，get就直接的多，当我们使用session.get()方法来得到一个对象时，不管我们使不使用这个对象，此时都会发出sql语句去从数据库中查询出来.
	使用load的加载方式比get的加载方式性能要好一些，因为load加载时，得到的只是一个代理对象，当真正需要使用这个对象时再去从数据库中查询

5. 过滤器可以实现哪些功能，什么是过滤器链。
	答:Servlet过滤器是可插入的 Web 组件，它允许我们实现 Web 应用程序中的预处理和后期处理逻辑。过滤器支持servlet和JSP页面的基本请求处理功能，比如日志记录、性能、安全、会话处理、XSLT 转换，等等
	过滤器链:由多个过滤器组成,流程:
	一个request请求进来了，先把自己交给filterChain;


	filterChain启动过滤器链，从头开始，把request交给第一个filter，并把自己传给filter;
	

filter在doFilter里做完自己的过滤逻辑，再调用filterChain的doFilter，以启动下一个过滤器；
	filterChain游标移动，启动下一个过滤器，如此循环下去......
	

过滤器游标走到链的末尾，filterChain执行收尾工作；
